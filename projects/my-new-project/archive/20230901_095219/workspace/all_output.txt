To create a clone of Instagram, we will need the following core classes, functions, and methods:

1. User: Represents a user of the application. It will have attributes like username, email, password, profile picture, etc. It will also have methods for user registration, login, and updating profile information.

2. Post: Represents a post made by a user. It will have attributes like the user who made the post, the content (image or video), caption, likes, comments, etc. It will have methods for creating a new post, deleting a post, liking a post, commenting on a post, etc.

3. Feed: Represents the user's feed, which displays posts from the users they follow. It will have methods for fetching the feed, updating the feed, etc.

4. Follow: Represents the relationship between users. It will have methods for following a user, unfollowing a user, fetching followers, fetching following users, etc.

5. Like: Represents the relationship between users and posts. It will have methods for liking a post, unliking a post, fetching likes for a post, etc.

6. Comment: Represents a comment made by a user on a post. It will have attributes like the user who made the comment, the content of the comment, etc. It will have methods for adding a comment, deleting a comment, fetching comments for a post, etc.

Now, let's proceed with creating the necessary files and their contents.

1. `user.py`:

```python
class User:
    def __init__(self, username, email, password):
        self.username = username
        self.email = email
        self.password = password
        # Other attributes like profile picture, etc.

    def register(self):
        # Register a new user

    def login(self):
        # User login

    def update_profile(self):
        # Update user profile information

    # Other methods related to user management
```

2. `post.py`:

```python
class Post:
    def __init__(self, user, content, caption):
        self.user = user
        self.content = content
        self.caption = caption
        # Other attributes like likes, comments, etc.

    def create_post(self):
        # Create a new post

    def delete_post(self):
        # Delete a post

    def like_post(self):
        # Like a post

    def comment_on_post(self):
        # Comment on a post

    # Other methods related to post management
```

3. `feed.py`:

```python
class Feed:
    def __init__(self, user):
        self.user = user

    def fetch_feed(self):
        # Fetch the user's feed

    def update_feed(self):
        # Update the user's feed

    # Other methods related to feed management
```

4. `follow.py`:

```python
class Follow:
    def __init__(self, user):
        self.user = user

    def follow_user(self):
        # Follow a user

    def unfollow_user(self):
        # Unfollow a user

    def fetch_followers(self):
        # Fetch followers of a user

    def fetch_following(self):
        # Fetch users followed by a user

    # Other methods related to follow management
```

5. `like.py`:

```python
class Like:
    def __init__(self, user, post):
        self.user = user
        self.post = post

    def like_post(self):
        # Like a post

    def unlike_post(self):
        # Unlike a post

    def fetch_likes(self):
        # Fetch likes for a post

    # Other methods related to like management
```

6. `comment.py`:

```python
class Comment:
    def __init__(self, user, post, content):
        self.user = user
        self.post = post
        self.content = content

    def add_comment(self):
        # Add a comment to a post

    def delete_comment(self):
        # Delete a comment

    def fetch_comments(self):
        # Fetch comments for a post

    # Other methods related to comment management
```

This is the basic structure of the core classes and their methods for the Instagram clone. We can further expand and add more functionality as needed.